// Generated by CoffeeScript 1.6.3
(function() {
  $(function() {
    var $buttonIcon, $issueLoading, $issueSelect, API_KEY, CHARACTERS_MAX, CONTENT_TYPE, HOST, ISSUES, ONE_MINUTE, USER_ID, hours, init, isTracking, loadOpenAssignedIssues, onClickSubmit, onKeyDownComment, postData, setSelectOption, start, submitTimeEntry;
    API_KEY = "ApiKey";
    HOST = "Host";
    USER_ID = "userId";
    ISSUES = "/issues.json?status_id=open&assigned_to_id=";
    CONTENT_TYPE = "application/json";
    ONE_MINUTE = 1000 * 60;
    CHARACTERS_MAX = 255;
    postData = {
      "time_entry": {
        "issue_id": 0,
        "hours": 0,
        "activity_id": 8,
        "comments": ""
      }
    };
    hours = 0;
    isTracking = false;
    start = null;
    $buttonIcon = $('#buttonIcon');
    $issueSelect = $('#issueSelect');
    $issueLoading = $('#issueLoading');
    /*
     On ready document, init.
    */

    $(document).ready(function() {
      return init();
    });
    /*
     get data from localStorage, then init.
    */

    init = function() {
      var apiKey, host, userId;
      host = localStorage[HOST];
      apiKey = localStorage[API_KEY];
      userId = localStorage[USER_ID];
      if ((apiKey == null) || (host == null) || (userId == null)) {
        return;
      }
      loadOpenAssignedIssues(host, apiKey, userId);
      $("#submitButton").click(function() {
        return onClickSubmit(host, apiKey, userId);
      });
      return $("#comment").keyup(onKeyDownComment);
    };
    /*
     Load tickets associated to user ID.
    */

    loadOpenAssignedIssues = function(host, apiKey, userId) {
      console.log("load open assigned issues for " + userId);
      return $.ajax({
        type: "GET",
        url: host + ISSUES + userId,
        contentType: CONTENT_TYPE,
        headers: {
          "X-Redmine-API-Key": apiKey
        },
        success: setSelectOption
      });
    };
    /*
     Set options to the issue select form.
    */

    setSelectOption = function(res) {
      var arr;
      arr = $.map(res.issues, function(issue) {
        return "<option value=\"" + issue.id + "\">#" + issue.id + " " + issue.subject + "</option>";
      });
      return $("#issueSelect").html(arr.join(""));
    };
    /*
     Start or End Time tracking
    */

    onClickSubmit = function(host, apiKey, userId) {
      var end, millisec;
      if (isTracking) {
        isTracking = false;
        end = new Date();
        millisec = end.getTime() - start.getTime();
        if (millisec > ONE_MINUTE) {
          hours = millisec / 1000 / 60 / 60;
          submitTimeEntry(host, apiKey, userId, hours);
        } else {
          console.log("Too short time entry.");
        }
        $buttonIcon.addClass('icon-play-sign');
        $buttonIcon.removeClass('icon-stop');
        $issueSelect.show();
        return $issueLoading.hide();
      } else {
        isTracking = true;
        start = new Date();
        $buttonIcon.removeClass('icon-play-sign');
        $buttonIcon.addClass('icon-stop');
        $issueSelect.hide();
        return $issueLoading.show();
      }
    };
    /*
     submit to redmine server.
    */

    submitTimeEntry = function(host, apiKey, userId, hours) {
      var comments, issueId;
      issueId = $('#issueSelect').val();
      comments = $('#comment').val();
      if (comments.length > CHARACTERS_MAX) {
        comments = comments.substring(0, CHARACTERS_MAX - 1);
      }
      postData.time_entry.issue_id = issueId;
      postData.time_entry.hours = hours;
      postData.time_entry.comments = comments;
      return $.ajax({
        type: "POST",
        url: host + ("/issues/" + issueId + "/time_entries.json"),
        contentType: CONTENT_TYPE,
        headers: {
          "X-Redmine-API-Key": apiKey
        },
        data: JSON.stringify(postData),
        dataType: "json",
        success: function(msg) {
          var _ref;
          return console.log('time_entry id: ' + (msg != null ? (_ref = msg.time_entry) != null ? _ref.id : void 0 : void 0));
        }
      });
    };
    /*
     check comment length
    */

    return onKeyDownComment = function() {
      var thisValueLength;
      thisValueLength = $(this).val().length;
      $('#commentCount').html(thisValueLength);
      if (thisValueLength > CHARACTERS_MAX) {
        $('#commentCount').addClass("label-danger");
        return $('#commentCount').removeClass("label-info");
      } else {
        $('#commentCount').addClass("label-info");
        return $('#commentCount').removeClass("label-danger");
      }
    };
  });

}).call(this);
